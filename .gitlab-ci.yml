#
# EXEC ORDER OF STAGES
stages:
    #- build
    #- validate
    #- test
    #- analyse
    - deploy
    - finish
#
#
# MAIN BEFORE SCRIPT
#before_script:
#        - echo "START MAIN SCRIPT"
# #
# # BUILD JOB: BUILD modem_on BINARY, STORE ON CACHE AND CREATE DOWNLOADABLE ARTIFACT
# build_modem_on:
    # stage: build    # DEFINES STAGE NATURE
    # #
    # before_script:
        # - echo "START build_modem_on SCRIPT"
    # #
    # script:
        # # CREATE BIN FOLDER (IF NOT EXISTS)
        # - mkdir -p bin
        # # CREATE MAIN OUTPUT FOLDER (IF NOT EXISTS)
        # - mkdir -p outputs/temp
        # # BUILD SCRIPT
        # - bash scripts/build_modem_on.sh | tee outputs/temp/build_modem_on.txt
        # # CREATE DOCS FOLDER (IF NOT EXISTS)
        # - mkdir -p docs/
        # # RUN DOXYGEN ON src/
        # - bash scripts/update_doxygen.sh | tee outputs/temp/update_doxygen.txt
    # #
    # artifacts:
        # paths:
            # - bin
            # - outputs/temp
            # - docs
        # expire_in: 1 week
    # #
    # after_script:
        # - echo "FINISH build_modem_on"
# #
# # TEST READ_WRITE STD
# test_read_write_baseline:
    # stage: validate
    # dependencies:
        # - build_modem_on            # NEEDS bin/ModEM_Baseline FROM build_modem_on
    # #
    # script:
        # #
        # # CREATE OUTPUT FOLDER
        # - mkdir -p outputs/temp/test_read_write
        # #
        # # STD READ RIGHT TEST WITH 1 PROC
        # - bash scripts/auto/test_read_write.sh bin/ModEM_Baseline 1
    # #
    # artifacts:
        # paths:
            # - outputs/temp
        # expire_in: 1 week
# #
# # TEST MULT BY J T STD
# test_forward_baseline:
    # stage: test
    # dependencies:
        # - build_modem_on            # NEEDS bin/ModEM_Baseline FROM build_modem_on
    # #
    # script:
        # #
        # # CREATE OUTPUT FOLDER
        # - mkdir -p outputs/temp/test_forward
        # #
        # # STD READ RIGHT TEST WITH NPROC
        # - bash scripts/auto/test_forward.sh bin/ModEM_Baseline
    # #
    # artifacts:
        # paths:
            # - outputs/temp
        # expire_in: 1 week
# #
# # TEST MULT BY J T STD
# test_mult_by_j_t_baseline:
    # stage: test
    # dependencies:
        # - build_modem_on            # NEEDS bin/ModEM_Baseline FROM build_modem_on
    # #
    # script:
        # #
        # # CREATE OUTPUT FOLDER
        # - mkdir -p outputs/temp/test_mult_by_j_t
        # #
        # # STD READ RIGHT TEST WITH NPROC
        # - bash scripts/auto/test_mult_by_j_t.sh bin/ModEM_Baseline
    # #
    # artifacts:
        # paths:
            # - outputs/temp
        # expire_in: 1 week
# #
# # TEST ADJ J STD
# test_symmetry_baseline:
    # stage: analyse
    # dependencies:
        # - build_modem_on            # NEEDS bin/ModEM_Baseline FROM build_modem_on
        # #
        # - test_mult_by_j_t_baseline      # NEEDS outputs/wFile_dModel FROM test_mult_by_j_t_baseline
    # #
    # script:
        # #
        # # CREATE OUTPUT FOLDER
        # - mkdir -p outputs/temp/test_symmetry
        # #
        # # STD READ RIGHT TEST WITH NPROC
        # - bash scripts/auto/test_symmetry.sh bin/ModEM_Baseline
    # #
    # artifacts:
        # paths:
            # - outputs/temp
        # expire_in: 1 week
# #
# # DEPLOY: UPDATE GITLAB
# update_gitlab:
    # stage: deploy
    # environment: production
    # script:
        # #
        # # REMOVE BINARIES
        # - rm -rf bin/
        # #
        # # CREATE FOLDER UNIQUE NAME
        # - output_folder=gitlab_$(date "+%Y_%m_%d_%H_%M_%S")
        # #
        # # CHANGE TEMP NAME
        # - mv outputs/temp outputs/$output_folder
        # #
        # # BASH: UPDATES GITLAB
        # - bash scripts/update_gitlab.sh | tee outputs/$output_folder/update_gitlab.txt
        # #
    # #
    # artifacts:
        # paths:
            # - outputs/$output_folder/
        # expire_in: 1 week
# #
# DEPLOY: UPDATE PAGES
pages:
    stage: deploy
    environment: staging
    script:
        #
        # BASH: PAGE UPDATES
        - bash scripts/update_pages.sh
        #
    artifacts:
        paths:
            - public
        expire_in: 30 days
    only:
        - master
#
#
clean_cache:
  stage: finish
  script:
    - echo "Cleaning up"
    - rm -rf "%CACHE_PATH%/%CI_PIPELINE_ID%"
  when: always
#
# END MAIN SCRIPT