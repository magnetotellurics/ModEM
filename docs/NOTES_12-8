Methods needed in abstract ModelParameter -- might as well implement these whenever you have time

Vector Space
function dotProd_modelParam(m1, m2) result(r)
subroutine linComb_modelParam(a1, m1, a2, m2, m)    !   allow overwritting of m1 and/or m2 by m
subroutine scMult_modelParam(a, mIn, mOut)
subroutine scMultAdd_modelParam(a, mIn, mOut)

Other
logical function iszero_modelParam(m) result (zeroValued)  ???
subroutine random_modelParam(m, eps)

Implementations are obvious, but for reference see stable- (src/3D_MT/modelParam/ModelSpace.f90)
The above lines should pretty much define interfaces for abstract class: m* are i
of class ModelParameter_a, arguments a* are real(kind=prec)

Implementations for ModelParameterCell_SG can, for the most part, be written using the
same methods used for rVector (assuming that these methods have been developed for this class):
property cellCond in this class has type rVector3DSG_t.  So, for dotProd_modelParameter result
is just r = m1.cellCond%dotProd(m2.cellCond).    For other model parameter representations
there may be no similar property of class rVectora.   Ask if there are questions.


